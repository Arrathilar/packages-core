# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

# Maintainer: Philip MÃ¼ller <philm@manjaro.org>
# Maintainer: Guinux <guillaume@manjaro.org>
# Maintainer: Rob McCathie <rob@manjaro.org>

pkgbase=linux311
pkgname=('linux311' 'linux311-headers')
_kernelname=-MANJARO
_basekernel=3.11
_basever=311
_aufs=20140825
_subver=15
_bfq=v7r5
pkgver=${_basekernel}.10.${_subver}
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v3.x/linux-${_basekernel}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${_basekernel}.10.xz"
        # the main kernel config files
        'config' 'config.x86_64' 'config.aufs'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        "aufs3.11-${_aufs}.patch.bz2"
        'aufs3-base.patch'
        'aufs3-kbuild.patch'
        'aufs3-loopback.patch'
        'aufs3-mmap.patch'
        'aufs3-standalone.patch'
        'tmpfs-ibitmap.patch'
        'vfs-ino.patch'
        'change-default-console-loglevel.patch'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/linux-patches/genpatches-2.6/trunk/3.12/1700_enable-thinkpad-micled.patch'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/linux-patches/genpatches-2.6/trunk/3.10/2700_ThinkPad-30-brightness-control-fix.patch'
        'criu-no-expert.patch'
        "0001-block-cgroups-kconfig-build-bits-for-BFQ-${_bfq}.patch::http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.11.0-${_bfq}/0001-block-cgroups-kconfig-build-bits-for-BFQ-${_bfq}-3.11.patch"
        "0002-block-introduce-the-BFQ-${_bfq}-I-O-sched.patch::http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.11.0-${_bfq}/0002-block-introduce-the-BFQ-${_bfq}-I-O-sched-for-3.11.patch"
        "0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${_bfq}.patch::http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.11.0-${_bfq}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${_bfq}-for-3.11.0.patch"
        "${_basekernel}.10.1.patch"
        "${_basekernel}.10.2.patch"
        "${_basekernel}.10.3.patch"
        "${_basekernel}.10.4.patch"
        "${_basekernel}.10.5.patch"
        "${_basekernel}.10.6.patch"
        "${_basekernel}.10.7.patch"
        "${_basekernel}.10.8.patch"
        "${_basekernel}.10.9.patch"
        "${_basekernel}.10.10.patch"
        "${_basekernel}.10.11.patch"
        "${_basekernel}.10.12.patch"
        "${_basekernel}.10.13.patch"
        "${_basekernel}.10.14.patch"
        "${_basekernel}.10.15.patch"
)
sha256sums=('803ec8f0ad4b2ddedcb0332a590cd2b5e10dfc57c3b1c95bc9c46af81d51d7f9'
            'b12321f0d62476211662945361178819b134964babd238a67dab0824edcf19b1'
            'ab6b006c546e01f5156b1f2d3ba4b56a19d50ef9d0fedcc47e80b5bb5b8ae449'
            'b55870930e7a414788b967071b7cf7f7693a46a6470b0eee6161d96f17ea2198'
            '0e6dc539d014131b144640cbb38914e3ef91a771de66d5fb4990f7c7ce6a8959'
            'd3be8e800b7fa0ab82700a61f7c85e4fe351f1b73688120a9a465bd34b473b19'
            '1642f1490150b29c00f76a5b43f83052df175c70436e7f089d6381f4fda24250'
            '49f8d7195e450867546bfd906a8631616a2e303c28d134d862c431d2049df42f'
            'c73dd98a7b0a6941762a74128625d0a64032a2e96ba74d379090c094fac41cf5'
            '87d07e0405362adc8b720417e732813ff5b409b63d42f4af76af624e05556520'
            '87720f0333b1a73e46d929d435f89c43c04b68d2353ca0f18557db7d0cf1e41e'
            '1e8c907ae32b12a4e68999520dc862e7d13ac837c7907646e9af0f908d88933a'
            '2fbf9f0b46e2d1383639397cef2145d4e51bb0103bea32782de2d66e7a218ba9'
            '6a1ce9eec208a6e112aefb2e91978499c3498541e70edf8e7b624475b997b5e0'
            'd633a2039877c00302f32738099ee53e0275350a8f73691ecb107fb9735db5a9'
            '461aa0da7de8bda9474797339532304894b55825be34f8c009244da8c00c5b41'
            '9d7eab1ffec60f2b0d2121221d957f17a02918d95f11ea52902c227df5105e25'
            'daa75228a4c45a925cc5dbfeba884aa696a973a26af7695adc198c396474cbd5'
            'a6b7376d658dfd7a6f83408c4c2b984223e0aafbfa2b4642b568b7198f7520db'
            '9204b7a65cbfd878ac13eb8eb89c90243301a93fc3a9054929f6560e324c9bc4'
            'b74f1ba06a35f461839a84030387edbc944a34ee11460d3670a4031d606deffb'
            '41a7a1736a92b5247a1f62dafa0231f01dd382dacbf556c15fb1685d06a58ca5'
            '13b4068d934da3715b16459676eb844459ee3d39ee9d3cee260dae9fc30c37cd'
            '77edb62b255e650e390e66f20f9aa31b1e65b3ea05539db41bb6744e9b057f3f'
            '0b1049ab532f19db675cb3b311a3f8af7702643ec33635c946c3354b3a865060'
            'c8c05494da51bebad223a63fe9ea0cbc1e6b2ecfe165873fb97cf4b33af552a1'
            '2f8a71f79b1bf130e962df69a58f605d367cdd246aed5395f0eac4c5f106ecf5'
            '92d4ffe64e784beeed7002610aa5ce5154e42706f118afd41bebbaa1926c68e1'
            'd22f7f07ed0f85067a23786949d48ff080cfda1eecae6fecc8bbf8c539d62f01'
            '2751b7d2f665a13e30bf83297b4642df1b1c6e940070e6b79f5055d35335176a'
            '6dc62787dbf071e98e2a8be4589b5a04860013a7da78ad724a1022a0b62010a1'
            '244de9e085ae95dbe94d6480ca30ca30f866aab6e70ce3f2a857b5e16c2f4c2b'
            '4c4aceb99554ba34f930e17bff6e23d69fd61f3d69e78459f5dc6d9396902794'
            '1871b1c8150175d41e2dc721c25983040f60c24de8ddc74e9e875eddbd4e1234'
            '984572c06b4c4f7f6360266c1eb8a78f48e469ec0d7118ff502d91aa31d2b728'
            '86310ec6f28f0c4c4148d554c8903713fecfa2e3f579fe8f34fe11ee23ce9ff8'
)

prepare() {
  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${_basekernel}.10"

  # add extended stable patch(es)
  patch -p1 -i "${srcdir}/${_basekernel}.10.1.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.2.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.3.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.4.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.5.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.6.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.7.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.8.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.9.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.10.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.11.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.12.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.13.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.14.patch"
  patch -p1 -i "${srcdir}/${_basekernel}.10.15.patch"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git
  # enable only if you have "gen-stable-queue-patch.sh" executed before
  #patch -Np1 -i "${srcdir}/prepatch-${_basekernel}-`date +%Y%m%d`"

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  # allow criu without expert option set
  # patch from fedora
  patch -Np1 -i "${srcdir}/criu-no-expert.patch"

  # add Gentoo patches
  patch -Np1 -i "${srcdir}/1700_enable-thinkpad-micled.patch"
  patch -Np1 -i "${srcdir}/2700_ThinkPad-30-brightness-control-fix.patch"

  # add aufs3 support
  patch -Np1 -i "${srcdir}/aufs3.11-${_aufs}.patch"
  patch -Np1 -i "${srcdir}/aufs3-base.patch"
  patch -Np1 -i "${srcdir}/aufs3-kbuild.patch"
  patch -Np1 -i "${srcdir}/aufs3-loopback.patch"
  patch -Np1 -i "${srcdir}/aufs3-mmap.patch"
  patch -Np1 -i "${srcdir}/aufs3-standalone.patch"
  patch -Np1 -i "${srcdir}/tmpfs-ibitmap.patch"
  patch -Np1 -i "${srcdir}/vfs-ino.patch"

  # add BFQ scheduler
  patch -Np1 -i "${srcdir}/0001-block-cgroups-kconfig-build-bits-for-BFQ-${_bfq}.patch"
  patch -Np1 -i "${srcdir}/0002-block-introduce-the-BFQ-${_bfq}-I-O-sched.patch"
  patch -Np1 -i "${srcdir}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${_bfq}.patch"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  cat "${srcdir}/config.aufs" >> ./.config

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 .${_subver}-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # normally not needed
  make clean

  # get kernel version
  make prepare

  # run scripts
  make scripts
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################

  yes "" | make config

  # build!
  make ${MAKEFLAGS} bzImage modules
}

package_linux311() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}")
  install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make kernelrelease)"

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${_basever}-${CARCH}"

  # add kernel version
  if [ "${CARCH}" = "x86_64" ]; then
     echo "${pkgver}-${pkgrel}-MANJARO x64" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
  else
     echo "${pkgver}-${pkgrel}-MANJARO x32" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
  fi

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # set correct depmod command for install
  sed \
    -e  "s/RELEASE=.*/RELEASE=${pkgver}-${pkgrel}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -e  "s/KERNEL_BASE=.*/KERNEL_BASE=${_basekernel}/g" \
    -e  "s/BASEVER=.*/BASEVER=${_basever}/g" \
    -e  "s/ARCH=.*/ARCH=${CARCH}/g" \
    -i "${startdir}/${pkgname}.install"
  sed \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${_basever}-${CARCH}\"|g" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${_basever}-${CARCH}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${_basever}-${CARCH}-fallback.img\"|g" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--MANJARO}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--MANJARO}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--MANJARO}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux311-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  provides=("linux-headers=$pkgver")

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${pkgdir}/usr/lib/modules/${_kernver}"
  ln -sf ../../../src/linux-${_kernver} build

  cd "${srcdir}/linux-${_basekernel}"

  install -D -m644 Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/src/linux-${_kernver}/.config"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

  for i in acpi asm-generic config crypto drm generated linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
  cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

  # add headers for lirc package
  # pci
  for i in bt8xx cx88 saa7134; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
  done
  # usb
  for i in cpia2 em28xx pwc sn9c102; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
  done
  # i2c
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c"
  cp drivers/media/i2c/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
  for i in cx25840; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
  done

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

  # fix aufs_type.h
  sed -i "s:__user::g" "${pkgdir}/usr/src/linux-${_kernver}/include/uapi/linux/aufs_type.h"


  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}
